local busted = require "busted"
local describe = busted.describe
local it = busted.it
local mock = busted.mock
require('tranquility/link_clock')
require('tranquility/pattern')
require('tranquility/stream')

describe("LinkClock", function()
    describe("construction", function()
        it("should create with defaults", function()
            local clock = LinkClock:new()
            assert.are.equal(clock.bpm, 120)
            assert.are.equal(clock.sampleRate, 1 / 20)
            assert.are.equal(clock.beatsPerCycle, 4)
            assert.are.equal(clock._isRunning, false)
            assert.are.same(clock._subscribers, {})
            assert.is_not_nil(clock._link)
            assert.is_not_nil(clock._linkSessionState)
            assert.is_nil(clock._notifyCoroutine)
        end)
    end)
    describe("subscribe/unsubscribe", function()
        it("should add/remove to list of subscribers", function()
            local clock = LinkClock:new(120)
            local mySub = Stream:new()
            mySub._pattern = Pure("i am the first")
            clock:subscribe(mySub)
            assert.are.equal(#(clock._subscribers), 1)
            assert.are.equal(clock._subscribers[1], mySub) -- lua is 1 indexed... i will remember... lol
            local mySub2 = Stream:new()
            mySub2._pattern = Pure("I am the second")
            clock:subscribe(mySub2)
            assert.are.equal(#(clock._subscribers), 2)
            assert.are.equal(clock._subscribers[1], mySub)
            assert.are.equal(clock._subscribers[2], mySub2)
            clock:unsubscribe(mySub)
            assert.are.equal(#(clock._subscribers), 1)
            assert.are.equal(clock._subscribers[1], mySub2)
        end)
    end)
    describe("notify", function()
        it("should call stream's notify method on tick", function()
            local clock = LinkClock:new()
            clock._link = mock(clock._link, true)
            clock._linkSessionState = mock(clock._linkSessionState)
            local stream = mock(Stream:new(), true)
            clock:subscribe(stream)
            clock:start()

        end)
    end)
end)
